import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { insertMeditationSchema } from "@shared/schema";
import { useMutation } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { 
  Meditation, 
  purposeOptions, 
  voiceOptions, 
  musicOptions, 
  durationOptions, 
  affirmationOptions, 
  visualizationPrompts 
} from "@shared/schema";

import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
  FormDescription,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Slider } from "@/components/ui/slider";
import { Switch } from "@/components/ui/switch";
import { Checkbox } from "@/components/ui/checkbox";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { ChevronDown, ChevronUp, Wand2 } from "lucide-react";
import { Label } from "@/components/ui/label";

// Extend the schema for form validation
const formSchema = insertMeditationSchema.extend({
  title: z.string().min(1, "Title is required"),
  selectedAffirmations: z.array(z.string()).optional().default([]),
  customAffirmations: z.string().optional().default(""),
  visualizationPrompt: z.string().optional(),
  visualizationResponses: z.record(z.string()).optional().default({})
});

interface MeditationFormProps {
  onGenerate: (meditation: Meditation) => void;
  initialValues?: Meditation | null;
  isGenerating: boolean;
}

export default function MeditationForm({ onGenerate, initialValues, isGenerating }: MeditationFormProps) {
  const { toast } = useToast();
  const [isAdvancedOpen, setIsAdvancedOpen] = useState(false);
  const [selectedVisualPrompt, setSelectedVisualPrompt] = useState<string | null>(null);
  const [affirmationsTab, setAffirmationsTab] = useState<"predefined" | "custom">("predefined");

  // Default form values
  const defaultValues = {
    title: initialValues?.title || "My Meditation",
    purpose: initialValues?.purpose || "sleep",
    selectedAffirmations: initialValues?.selectedAffirmations || [],
    customAffirmations: initialValues?.customAffirmations || "",
    visualizationPrompt: initialValues?.visualizationPrompt || "",
    visualizationResponses: initialValues?.visualizationResponses || {},
    voiceStyle: initialValues?.voiceStyle || "calm",
    backgroundMusic: initialValues?.backgroundMusic || "gentle-piano",
    musicVolume: initialValues?.musicVolume || 50,
    duration: initialValues?.duration || 10,
    pauseDuration: initialValues?.pauseDuration || 2,
    autoRepeat: initialValues?.autoRepeat ?? true,
    fadeOut: initialValues?.fadeOut ?? false,
  };

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues,
  });

  // Set selected visualization prompt
  useEffect(() => {
    if (form.watch("visualizationPrompt")) {
      setSelectedVisualPrompt(form.watch("visualizationPrompt"));
    }
  }, [form.watch("visualizationPrompt")]);

  const createMeditation = useMutation({
    mutationFn: async (data: z.infer<typeof formSchema>) => {
      const response = await apiRequest("POST", "/api/meditations", data);
      return response.json();
    },
    onSuccess: (data: Meditation) => {
      queryClient.invalidateQueries({ queryKey: ['/api/meditations'] });
      toast({
        title: "Meditation created",
        description: "Your meditation has been saved successfully.",
      });
      onGenerate(data);
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: `Failed to create meditation: ${error.message}`,
        variant: "destructive",
      });
    },
  });

  const onSubmit = (data: z.infer<typeof formSchema>) => {
    createMeditation.mutate(data);
  };

  // Get the currently selected visualization prompt questions
  const currentVisualizationQuestions = selectedVisualPrompt 
    ? visualizationPrompts.find(p => p.id === selectedVisualPrompt)?.questions || []
    : [];

  // Count affirmations
  const selectedAffirmationCount = form.watch("selectedAffirmations")?.length || 0;
  const customAffirmationCount = form.watch("customAffirmations")?.split('\n').filter(line => line.trim() !== '').length || 0;

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        {/* Title field */}
        <FormField
          control={form.control}
          name="title"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Meditation Title</FormLabel>
              <FormControl>
                <Input placeholder="Enter a title for your meditation" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        {/* Purpose Selection */}
        <FormField
          control={form.control}
          name="purpose"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Meditation Purpose</FormLabel>
              <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
                {purposeOptions.map((purpose) => (
                  <Button
                    key={purpose.id}
                    type="button"
                    variant={field.value === purpose.id ? "default" : "outline"}
                    className={`text-sm justify-start ${field.value === purpose.id ? 'bg-primary text-primary-foreground' : ''}`}
                    onClick={() => form.setValue("purpose", purpose.id)}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" 
                      className="w-4 h-4 mr-1" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      {purpose.icon === "moon" && <path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z" />}
                      {purpose.icon === "sun" && (
                        <>
                          <circle cx="12" cy="12" r="4" />
                          <path d="M12 2v2" />
                          <path d="M12 20v2" />
                          <path d="m4.93 4.93 1.41 1.41" />
                          <path d="m17.66 17.66 1.41 1.41" />
                          <path d="M2 12h2" />
                          <path d="M20 12h2" />
                          <path d="m6.34 17.66-1.41 1.41" />
                          <path d="m19.07 4.93-1.41 1.41" />
                        </>
                      )}
                      {purpose.icon === "target" && (
                        <>
                          <circle cx="12" cy="12" r="10" />
                          <circle cx="12" cy="12" r="6" />
                          <circle cx="12" cy="12" r="2" />
                        </>
                      )}
                      {purpose.icon === "heart" && (
                        <path d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z" />
                      )}
                      {purpose.icon === "smile" && (
                        <>
                          <circle cx="12" cy="12" r="10" />
                          <path d="M8 14s1.5 2 4 2 4-2 4-2" />
                          <line x1="9" x2="9.01" y1="9" y2="9" />
                          <line x1="15" x2="15.01" y1="9" y2="9" />
                        </>
                      )}
                      {purpose.icon === "presentation" && (
                        <>
                          <path d="M2 3h20" />
                          <path d="M21 3v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V3" />
                          <path d="m7 16 5 5 5-5" />
                        </>
                      )}
                    </svg>
                    {purpose.name}
                  </Button>
                ))}
              </div>
              <FormMessage />
            </FormItem>
          )}
        />

        {/* Duration */}
        <FormField
          control={form.control}
          name="duration"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Duration</FormLabel>
              <FormControl>
                <RadioGroup
                  onValueChange={(val) => field.onChange(parseInt(val))}
                  defaultValue={field.value.toString()}
                  className="grid grid-cols-2 sm:grid-cols-4 gap-3"
                >
                  {durationOptions.map((duration) => (
                    <FormItem key={duration.id}>
                      <FormControl>
                        <RadioGroupItem 
                          value={duration.id.toString()} 
                          id={`duration-${duration.id}`}
                          className="absolute opacity-0"
                        />
                      </FormControl>
                      <FormLabel
                        htmlFor={`duration-${duration.id}`}
                        className={`block text-center border ${field.value === duration.id ? 'border-primary bg-primary/5' : 'border-neutral-300'} rounded-lg py-3 cursor-pointer hover:bg-neutral-50 transition-colors`}
                      >
                        {duration.name}
                      </FormLabel>
                    </FormItem>
                  ))}
                </RadioGroup>
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        {/* Affirmations Section - With Tabs */}
        <div className="bg-neutral-50 rounded-lg border border-neutral-200 p-5">
          <h3 className="text-lg font-medium mb-4">Affirmations</h3>
          
          <Tabs defaultValue="predefined" onValueChange={(val) => setAffirmationsTab(val as "predefined" | "custom")}>
            <TabsList className="mb-4">
              <TabsTrigger value="predefined" className="flex-1">Choose from List</TabsTrigger>
              <TabsTrigger value="custom" className="flex-1">Write Your Own</TabsTrigger>
            </TabsList>
            
            <TabsContent value="predefined">
              <FormField
                control={form.control}
                name="selectedAffirmations"
                render={() => (
                  <FormItem>
                    <div className="mb-2 text-sm text-neutral-600">
                      Select up to 10 affirmations that resonate with you
                    </div>
                    
                    <div className="space-y-2 max-h-[350px] overflow-y-auto p-2 border rounded-md">
                      {affirmationOptions.map((affirmation) => (
                        <FormField
                          key={affirmation.id}
                          control={form.control}
                          name="selectedAffirmations"
                          render={({ field }) => {
                            return (
                              <FormItem
                                key={affirmation.id}
                                className="flex flex-row items-start space-x-3 space-y-0 py-1"
                              >
                                <FormControl>
                                  <Checkbox
                                    checked={field.value?.includes(affirmation.id)}
                                    onCheckedChange={(checked) => {
                                      const currentValues = field.value || [];
                                      if (checked) {
                                        if (currentValues.length < 10) {
                                          field.onChange([...currentValues, affirmation.id]);
                                        } else {
                                          toast({
                                            description: "You can select up to 10 affirmations",
                                            variant: "default",
                                          });
                                        }
                                      } else {
                                        field.onChange(
                                          currentValues.filter((value) => value !== affirmation.id)
                                        );
                                      }
                                    }}
                                  />
                                </FormControl>
                                <FormLabel className="text-sm font-normal cursor-pointer">
                                  {affirmation.text}
                                </FormLabel>
                              </FormItem>
                            );
                          }}
                        />
                      ))}
                    </div>
                    
                    <div className="mt-2 text-sm text-right text-neutral-500">
                      {selectedAffirmationCount}/10 affirmations selected
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </TabsContent>
            
            <TabsContent value="custom">
              <FormField
                control={form.control}
                name="customAffirmations"
                render={({ field }) => (
                  <FormItem>
                    <FormControl>
                      <Textarea 
                        placeholder="Enter each affirmation on a new line. For example:&#10;I am confident and capable.&#10;I embrace challenges with courage.&#10;I deserve success and happiness."
                        className="min-h-[200px] resize-none"
                        {...field}
                      />
                    </FormControl>
                    <div className="mt-2 flex justify-between text-sm">
                      <p className="text-neutral-500">Enter each affirmation on a new line</p>
                      <p className="text-neutral-500">{customAffirmationCount}/15 affirmations</p>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </TabsContent>
          </Tabs>
        </div>

        {/* Visualization Section */}
        <div className="bg-neutral-50 rounded-lg border border-neutral-200 p-5">
          <h3 className="text-lg font-medium mb-4">Guided Visualization</h3>
          
          <FormField
            control={form.control}
            name="visualizationPrompt"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Choose a Visualization Theme</FormLabel>
                <Select 
                  onValueChange={(value) => {
                    field.onChange(value);
                    setSelectedVisualPrompt(value);
                  }}
                  defaultValue={field.value || undefined}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select a visualization theme" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {visualizationPrompts.map((prompt) => (
                      <SelectItem key={prompt.id} value={prompt.id}>{prompt.title}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />

          {selectedVisualPrompt && (
            <div className="mt-4 space-y-4">
              {currentVisualizationQuestions.map((question, index) => (
                <FormField
                  key={index}
                  control={form.control}
                  name={`visualizationResponses.${index}`}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>{question}</FormLabel>
                      <FormControl>
                        <Textarea 
                          placeholder="Describe your visualization..."
                          className="resize-none"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              ))}
            </div>
          )}
        </div>

        {/* Voice Style */}
        <FormField
          control={form.control}
          name="voiceStyle"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Voice Style</FormLabel>
              <FormControl>
                <RadioGroup
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                  className="grid grid-cols-1 sm:grid-cols-3 gap-3"
                >
                  {voiceOptions.map((voice) => (
                    <FormItem key={voice.id} className="relative">
                      <FormControl>
                        <RadioGroupItem 
                          value={voice.id} 
                          id={`voice-${voice.id}`}
                          className="absolute opacity-0 w-full h-full cursor-pointer"
                        />
                      </FormControl>
                      <FormLabel
                        htmlFor={`voice-${voice.id}`}
                        className={`block w-full border ${field.value === voice.id ? 'border-primary bg-primary/5' : 'border-neutral-300'} rounded-lg p-4 cursor-pointer hover:bg-neutral-50 transition-colors`}
                      >
                        <div className="font-medium mb-1">{voice.name}</div>
                        <div className="text-sm text-neutral-600">{voice.description}</div>
                      </FormLabel>
                    </FormItem>
                  ))}
                </RadioGroup>
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        {/* Background Music */}
        <FormField
          control={form.control}
          name="backgroundMusic"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Background Music</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select background music" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  {musicOptions.map((music) => (
                    <SelectItem key={music.id} value={music.id}>{music.name}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />

        {/* Music Volume */}
        <FormField
          control={form.control}
          name="musicVolume"
          render={({ field }) => (
            <FormItem>
              <div className="flex justify-between mb-2">
                <FormLabel>Music Volume</FormLabel>
                <span className="text-neutral-600 text-sm">{field.value}%</span>
              </div>
              <FormControl>
                <Slider
                  min={0}
                  max={100}
                  step={1}
                  defaultValue={[field.value]}
                  onValueChange={(vals) => field.onChange(vals[0])}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        {/* Advanced Options */}
        <Collapsible open={isAdvancedOpen} onOpenChange={setIsAdvancedOpen} className="mb-6">
          <CollapsibleTrigger asChild>
            <Button type="button" variant="ghost" className="flex items-center text-primary font-medium p-0">
              {isAdvancedOpen ? <ChevronUp className="mr-1 h-4 w-4" /> : <ChevronDown className="mr-1 h-4 w-4" />}
              Advanced Options
            </Button>
          </CollapsibleTrigger>
          <CollapsibleContent className="mt-4 p-4 bg-neutral-50 rounded-lg border border-neutral-200">
            {/* Pause Between Affirmations */}
            <FormField
              control={form.control}
              name="pauseDuration"
              render={({ field }) => (
                <FormItem className="mb-4">
                  <div className="flex justify-between mb-2">
                    <FormLabel>Pause Between Affirmations</FormLabel>
                    <span className="text-neutral-600 text-sm">{field.value}s</span>
                  </div>
                  <FormControl>
                    <Slider
                      min={1}
                      max={5}
                      step={0.5}
                      defaultValue={[field.value]}
                      onValueChange={(vals) => field.onChange(vals[0])}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Auto-repeat */}
            <FormField
              control={form.control}
              name="autoRepeat"
              render={({ field }) => (
                <FormItem className="mb-4 flex justify-between items-center">
                  <FormLabel>Auto-repeat</FormLabel>
                  <FormControl>
                    <Switch
                      checked={field.value}
                      onCheckedChange={field.onChange}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Fade out at end */}
            <FormField
              control={form.control}
              name="fadeOut"
              render={({ field }) => (
                <FormItem className="flex justify-between items-center">
                  <FormLabel>Fade out at end</FormLabel>
                  <FormControl>
                    <Switch
                      checked={field.value}
                      onCheckedChange={field.onChange}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </CollapsibleContent>
        </Collapsible>

        {/* Action Buttons */}
        <div className="flex flex-col sm:flex-row gap-3 mt-8">
          <Button 
            type="submit"
            className="bg-primary hover:bg-primary/90 text-white font-semibold flex-1 flex justify-center items-center"
            disabled={isGenerating}
          >
            {isGenerating ? (
              <>
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Generating...
              </>
            ) : (
              <>
                <Wand2 className="mr-2 h-5 w-5" /> Generate Meditation
              </>
            )}
          </Button>
          <Button 
            type="button" 
            variant="outline"
            className="border border-neutral-300 hover:bg-neutral-100 text-neutral-700 font-semibold"
          >
            Save Draft
          </Button>
        </div>
      </form>
    </Form>
  );
}